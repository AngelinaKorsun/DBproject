{"version":3,"sources":["components/Header.js","utils/InstazApi.js","actions/index.js","components/CommentForm.js","components/PostListItem.js","components/PostList.js","components/SideMenu.js","components/Home.js","components/ErrorMessages.js","components/Login.js","components/Signup.js","components/PostDetail.js","components/PostForm.js","components/App.js","reducers/index.js","serviceWorker.js","index.js","middlewares/index.js"],"names":["Header","authMenu","className","to","userMenu","onClick","this","props","logoutUser","currentUser","id","React","Component","instazApi","axios","create","baseURL","process","REACT_APP_API_URL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Object","assign","Authorization","type","likePost","postId","dispatch","a","async","post","then","response","payload","error","data","message","addComment","editPost","postData","FormData","keys","forEach","key","append","patch","CommentForm","initialValues","onSubmit","values","resetForm","isSubmitting","errors","touched","handleChange","elementId","name","maxLength","placeholder","onChange","value","PostListItem","state","isArchiving","redirectToHome","isPreview","showActions","timesince_posted","author","username","src","avatar","alt","image","caption","user","is_liked","document","getElementById","focus","data-inverted","data-tooltip","data-position","setState","is_active","postActionsElem","likes","length","captionPreviewElem","comments","map","comment","index","PostList","fetchPosts","posts","connect","get","SideMenu","guestMenu","tabIndex","Home","ErrorMessages","LoginSchema","Yup","shape","required","password","Login","errorMessages","validationSchema","setSubmitting","loginUser","component","userData","SignupSchema","email","passwordConfirmation","oneOf","Signup","registerUser","PostDetail","viewPost","match","params","loadingDOM","currentPost","SUPPORTED_FORMATS","PostFormSchema","test","size","includes","max","Thumb","loading","thumb","undefined","rawFile","nextProps","file","reader","FileReader","onloadend","result","readAsDataURL","PostForm","createdPost","addPost","setFieldValue","event","currentTarget","files","App","path","exact","combineReducers","action","push","temporaryPosts","currentPostCopy","tempErrors","errorKey","concat","Boolean","location","hostname","store","createStore","reducers","applyMiddleware","thunk","next","setItem","removeItem","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b95a5924.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n  render() {\n    const authMenu = (\n      <div className=\"ui large borderless menu\">\n        <Link className=\"header item\" to=\"/\">Instaz</Link>\n        <Link className=\"right floated item\" to=\"/login\">Login</Link>\n        <Link className=\"item\" to=\"/signup\">Signup</Link>\n      </div>\n    );\n\n    const userMenu = (\n      <div className=\"ui large borderless menu\">\n        <Link className=\"header item\" to=\"/\">Instaz</Link>\n        <a className=\"clickable right floated item\" onClick={this.props.logoutUser}>Logout</a>\n      </div>\n    );\n\n    return(\n      <div className=\"ui grid Header\">\n        <div className=\"computer only row\">\n          <div className=\"column\">\n            {\n              this.props.currentUser ? userMenu : authMenu\n            }\n          </div>\n        </div>\n\n        <div className=\"tablet mobile only row\">\n          <div className=\"column\">\n            <div className=\"ui large borderless menu\">\n              <Link className=\"header item\" to=\"/\">Instaz</Link>\n              <a id=\"mobile_item\" className=\"item right floated\"><i className=\"bars icon\"></i></a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import axios from 'axios';\n\nconst instazApi = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n\ninstazApi.interceptors.request.use(config => {\n  const token = window.localStorage.getItem(\"jwt\");\n  if (token) {\n    config.headers = Object.assign({\n      Authorization: `Token ${token}`\n    }, config.headers)\n  }\n\n  return config;\n});\n\nexport default instazApi;\n","import instazApi from '../utils/InstazApi';\n\nconst fetchPosts = () => async dispatch => {\n  const response = await instazApi.get('/posts');\n\n  dispatch({\n    type: 'FETCH_POSTS',\n    payload: response\n  });\n};\n\nconst loginUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/login/', {...userData}).then(\n    response => {\n      dispatch({\n        type: 'LOGIN_USER',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'LOGIN_USER_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst registerUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/signup/', { ...userData }).then(\n    response => {\n      dispatch({\n        type: 'NEW_USER',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'NEW_USER_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT_USER'\n  };\n};\n\nconst likePost = (postId) => async dispatch => {\n  await instazApi.post(`/posts/${postId}/like/`).then(\n    response => {\n      dispatch({\n        type: 'TOGGLE_POST_LIKE',\n        payload: { postId }\n      });\n    },\n    error => {\n      dispatch({\n        type: 'TOGGLE_POST_LIKE_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst viewPost = (postId) => async dispatch => {\n  await instazApi.get(`/posts/${postId}/`).then(\n    response => {\n      dispatch({\n        type: 'VIEW_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'VIEW_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst addComment = ({ post, message }) => async dispatch => {\n  await instazApi.post('/comments/', { post, message }).then(\n    response => {\n      dispatch({\n        type: 'ADD_COMMENT',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'ADD_COMMENT_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst addPost = ({ image, caption }) => async dispatch => {\n  const postData = new FormData();\n  postData.append('image', image);\n  postData.append('caption', caption);\n\n  await instazApi.post(\n    \"/posts/\",\n    postData,\n    { headers: { 'content-type': 'multipart/form-data' }}\n  ).then(\n    response => {\n      dispatch({\n        type: 'ADD_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'ADD_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst editPost = post => async dispatch => {\n  const postData = new FormData();\n  Object.keys(post).forEach(key => {\n    if (key === 'image' && typeof post[key] === 'string') return;\n\n    postData.append(key, post[key]);\n  });\n\n  await instazApi.patch(\n    `/posts/${post.id}/`,\n    postData,\n    { headers: { 'content-type': 'multipart/form-data' }}\n  ).then(\n    response => {\n      dispatch({\n        type: 'EDIT_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'EDIT_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nexport {\n  addComment, addPost, editPost, fetchPosts, likePost,\n  loginUser, registerUser, logoutUser, viewPost\n};\n","import React from 'react';\nimport { Formik, Form } from 'formik';\n\nclass CommentForm extends React.Component {\n  render() {\n    return(\n      <div className=\"extra content\">\n        <Formik\n          initialValues={{\n            message: '',\n            post: this.props.post.id,\n          }}\n          onSubmit={(values, { resetForm }) => {\n            this.props.addComment(values).then(response => {\n              resetForm();\n              values.message = ''; // clear form\n            });\n          }}\n        >\n          {({ values, errors, touched, isSubmitting, handleChange }) => (\n            <Form className={isSubmitting ? \"ui loading form\" : \"ui form\"}>\n              <div className=\"ui large transparent left icon input\">\n                <i className=\"comment outline icon\"></i>\n                <input\n                  className=\"comment-field\"\n                  id={this.props.elementId}\n                  type=\"text\"\n                  name=\"message\"\n                  maxLength=\"400\"\n                  placeholder=\"Add Comment...\"\n                  onChange={handleChange}\n                  value={values.message}\n                />\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\n\nexport default CommentForm;\n","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport CommentForm from './CommentForm';\n\nclass PostListItem extends React.Component {\n  state = {\n    isArchiving: false,\n    redirectToHome: false\n  };\n\n  render() {\n    if (this.state.redirectToHome) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const { currentUser, post, isPreview, showActions } = this.props;\n    const captionPreviewElem = ({ id, caption }) => (\n      <span>\n        {caption + '...'} <Link className=\"ui sub header\" to={`/p/${id}`}>View full caption</Link>\n      </span>\n    );\n    const postActionsElem = (user, post) => (\n      <div className=\"content action-icons\">\n        <i\n          onClick={() => this.props.likePost(post.id)}\n          className={\"clickable big heart like icon\" + (post.is_liked ? \" red\" : \"\")}>\n        </i>\n        <i\n          onClick={() => { document.getElementById(`comment-field${post.id}`).focus(); }}\n          className=\"clickable big comment outline link icon\">\n        </i>\n        <i className=\"clickable big share icon\"></i>\n        {\n          // Show archive button for post owner\n          post.author.username === user.username\n            ? <span\n                className=\"clickable right floated\"\n                data-inverted=\"\"\n                data-tooltip={ this.state.isArchiving ? \"Archiving...\" : \"Archive this post\" }\n                data-position=\"top center\"\n                onClick={() => {\n                  this.setState({ isArchiving: true });\n                  this.props.editPost({ ...post, is_active: false }).then(() => {\n                    this.setState({ isArchiving: false, redirectToHome: !isPreview });\n                  });\n                }}>\n                  <i className={\n                    (this.state.isArchiving\n                     ? \"ui loading circle notch\"\n                     : \"archive icon\") + \" big link icon\"\n                  }></i>\n              </span>\n          : null\n        }\n      </div>\n    );\n\n    return(\n      <div className=\"ui fluid card\">\n        <div className=\"content\">\n          <Link className=\"ui right floated sub header\" to={`/p/${post.id}`}>{post.timesince_posted} ago</Link>\n          <Link className=\"ui left floated small header\" to={`/u/${post.author.username}`}>\n            <img className=\"ui avatar image\" src={post.author.avatar} alt={`${post.author.username}'s avatar`} />\n            {post.author.username}\n          </Link>\n        </div>\n        <div className=\"image\">\n          <img src={post.image} alt={post.caption} />\n        </div>\n        {\n          // Only show action icons for authenticated user\n          showActions ? postActionsElem(currentUser, post) : null\n        }\n        <div className=\"relaxed content\">\n          <p className=\"ui sub header\">{post.likes} likes</p>\n          <p className=\"post-description\">\n            <Link className=\"ui left floated small header author\" to={`/u/${post.author.username}`}>\n              {post.author.username}\n            </Link>\n            {post.caption && post.caption.length > 120 && isPreview ? captionPreviewElem(post) : post.caption}\n          </p>\n          { post.comments.length > 0 ? <div className=\"ui divider\"></div> : null }\n          {\n            post.comments.map((comment, index) => {\n              // Only show up to 3 comments for posts in list\n              return isPreview && index > 2 ? null : (\n                <p key={comment.id}>\n                  <Link className=\"ui left floated small header\" to={`/u/${comment.author.username}`}>\n                    {comment.author.username}\n                  </Link>\n                  {comment.message}\n                </p>\n              )\n            })\n          }\n          {\n            isPreview && post.comments.length > 3\n            ? <Link className=\"ui left floated sub header\" to={`/p/${post.id}`}>View all comments</Link>\n            : null\n          }\n        </div>\n        {\n          // Only show comment form for authenticated user\n          showActions ? (\n            <CommentForm post={post} addComment={this.props.addComment} elementId={`comment-field${post.id}`} />\n          ) : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default PostListItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addComment, editPost, fetchPosts, likePost } from '../actions';\nimport PostListItem from './PostListItem';\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  render() {\n    return(\n      <div className=\"left aligned nine wide computer sixteen wide mobile column post-list\">\n        {\n          this.props.posts.map(post => {\n            return(\n              <PostListItem\n                key={post.id}\n                post={post}\n                currentUser={this.props.currentUser}\n                editPost={this.props.editPost}\n                addComment={this.props.addComment}\n                likePost={this.props.likePost}\n                showActions={this.props.currentUser ? true : false}\n                isPreview={true} />\n            )\n          })\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { posts: state.posts };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addComment, editPost, fetchPosts, likePost }\n)(PostList);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass SideMenu extends React.Component {\n  render() {\n    const loggedInMenu = user => (\n      <div className=\"sticky-menu\">\n        <div className=\"user-info\">\n          <Link className=\"ui medium header\" to={`/u/${user.username}`}>\n            <img className=\"ui avatar image\" src={user.avatar} alt={`${user.username}'s avatar`} />\n            {user.username}\n          </Link>\n        </div>\n        <div className=\"ui hidden divider\"></div>\n        <Link className=\"ui labeled button add-button\" tabIndex=\"0\" to=\"/p/new\">\n          <div className=\"ui black button\">\n            <i className=\"plus square outline icon\"></i> Add Post\n          </div>\n        </Link>\n        <div className=\"ui vertical menu\">\n          <div className=\"item\">\n            <div className=\"ui input\"><input type=\"text\" placeholder=\"Search...\" /></div>\n          </div>\n          <a className=\"item\">\n            <i className=\"user icon\"></i> Profile\n          </a>\n          <a className=\"item\">\n            <i className=\"archive icon\"></i> Archive\n          </a>\n          <a className=\"item\">\n            Messages\n            <div className=\"ui label\">0</div>\n          </a>\n          <a className=\"item\" onClick={this.props.logoutUser}>\n            <i className=\"sign-out icon\"></i> Logout\n          </a>\n        </div>\n      </div>\n    );\n\n    const guestMenu = (\n      <div className=\"ui vertical menu sticky-menu\">\n        <div className=\"item\">\n          <div className=\"ui input\"><input type=\"text\" placeholder=\"Search...\"/></div>\n        </div>\n        <Link className=\"item\" to=\"/login\">\n          <i className=\"sign-in icon\"></i> Login\n        </Link>\n        <Link className=\"item\" to=\"/signup\">\n          <i className=\"user plus icon\"></i> Signup\n        </Link>\n      </div>\n    );\n\n    return(\n      <div className=\"four wide column computer only\">\n        {\n          this.props.currentUser ? loggedInMenu(this.props.currentUser) : guestMenu\n        }\n      </div>\n    );\n  }\n}\n\nexport default SideMenu;\n","import React from 'react';\n\nimport PostList from './PostList';\nimport SideMenu from './SideMenu';\n\nclass Home extends React.Component {\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"ui container center aligned\">\n          <div className=\"ui three column stackable grid\">\n            <div className=\"two wide column computer only\"></div>\n            <PostList currentUser={this.props.currentUser} />\n            <SideMenu currentUser={this.props.currentUser} logoutUser={this.props.logoutUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nconst ErrorMessages = ({ errors }) => errors && errors.length > 0 ? (\n  <div className=\"ui error message\">\n    <div className=\"header\">\n      There were some errors with your submission\n              </div>\n    <ul className=\"list\">\n      {\n        errors.map((error, index) => {\n          return <li key={index}>{error}</li>;\n        })\n      }\n    </ul>\n  </div>\n) : null;\n\nexport default ErrorMessages;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { loginUser } from '../actions';\nimport ErrorMessages from './ErrorMessages';\n\nconst LoginSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('This field is required'),\n  password: Yup.string()\n    .required('This field is required'),\n});\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"Login\">\n        <div className=\"ui container segment\">\n          <h2 className=\"ui center aligned header\">\n            <div className=\"content\">\n              Login\n              <div className=\"sub header\">Don't have an account yet? <Link to=\"/signup\">Signup</Link> for an account!</div>\n            </div>\n          </h2>\n          <ErrorMessages errors={this.props.errorMessages} />\n          <Formik\n            initialValues={{\n              username: '',\n              password: '',\n            }}\n            validationSchema={LoginSchema}\n            onSubmit={(values, { setSubmitting }) => {\n              this.props.loginUser(values).then(response => {\n                setSubmitting(false);\n              });\n            }}\n          >\n            {({ values, errors, touched, isSubmitting, handleChange }) => (\n              <Form className={isSubmitting ? \"ui loading form\" : \"ui form\"}>\n                <div className=\"required field\">\n                  <label>Username</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={handleChange} value={values.username} />\n                    <i className=\"user icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"username\" component=\"div\" />\n                </div>\n                <div className=\"required field\">\n                  <label>Password</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={handleChange} value={values.password} />\n                    <i className=\"lock icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"password\" component=\"div\" />\n                </div>\n                <button className=\"ui button\" type=\"submit\">Submit</button>\n              </Form>\n            )}\n          </Formik>\n          {\n            this.props.currentUser ? <Redirect to=\"/\" /> : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { errorMessages, currentUser } = state;\n  return { errorMessages, currentUser };\n};\n\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);\n","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { registerUser } from '../actions';\nimport ErrorMessages from './ErrorMessages';\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('This field is required'),\n  email: Yup.string()\n    .email('Please provide a valid email')\n    .required('This field is required'),\n  password: Yup.string()\n    .required('This field is required'),\n  passwordConfirmation: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n});\n\nclass Signup extends React.Component {\n  render() {\n    return (\n      <div className=\"Signup\">\n        <div className=\"ui container segment\">\n          <h2 className=\"ui center aligned header\">\n            <div className=\"content\">\n              Signup\n              <div className=\"sub header\">Already have an account? Use it to <Link to=\"/login\">login</Link>!</div>\n            </div>\n          </h2>\n          <ErrorMessages errors={this.props.errorMessages} />\n          <Formik\n            initialValues={{\n              username: '',\n              email: '',\n              password: '',\n              passwordConfirmation: '',\n            }}\n            validationSchema={SignupSchema}\n            onSubmit={(values, { setSubmitting }) => {\n              this.props.registerUser(values).then(response => {\n                setSubmitting(false);\n              });\n            }}\n          >\n            {({ values, errors, touched, isSubmitting, handleChange }) => (\n              <Form className={isSubmitting ? \"ui loading form\" : \"ui form\"}>\n                <div className=\"required field\">\n                  <label>Username</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={handleChange} value={values.username} />\n                    <i className=\"user icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"username\" component=\"div\" />\n                </div>\n                <div className=\"field\">\n                  <label>Email address</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"email\" name=\"email\" placeholder=\"Email address\" onChange={handleChange} value={values.email} />\n                    <i className=\"envelope outline icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"email\" component=\"div\" />\n                </div>\n                <div className=\"required field\">\n                  <label>Password</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={handleChange} value={values.password} />\n                    <i className=\"lock icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"password\" component=\"div\" />\n                </div>\n                <div className=\"required field\">\n                  <label>Password Confirmation</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"password\" name=\"passwordConfirmation\" placeholder=\"Password Confirmation\" onChange={handleChange} value={values.passwordConfirmation} />\n                    <i className=\"lock icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"passwordConfirmation\" component=\"div\" />\n                </div>\n                <button className=\"ui button\" type=\"submit\">Submit</button>\n              </Form>\n            )}\n          </Formik>\n          {\n            this.props.currentUser ? <Redirect to=\"/\" /> : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { errorMessages, currentUser } = state;\n  return { errorMessages, currentUser };\n};\n\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(Signup);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport PostListItem from './PostListItem';\nimport SideMenu from './SideMenu';\nimport { addComment, editPost, likePost, logoutUser, viewPost } from '../actions';\n\nclass PostDetail extends React.Component {\n  componentDidMount() {\n    this.props.viewPost(this.props.match.params.id);\n  }\n\n  render() {\n    const loadingDOM = (\n      <div className=\"ui segment loading-div\">\n        <div className=\"ui active inverted dimmer\">\n          <div className=\"ui massive text loader\">Loading</div>\n        </div>\n      </div>\n    );\n\n    const postDOM = post => (\n      <div className=\"ui three column stackable grid\">\n        <div className=\"two wide column computer only\"></div>\n        <div className=\"left aligned nine wide computer sixteen wide mobile column\">\n          <PostListItem\n            key={post.id}\n            post={post}\n            currentUser={this.props.currentUser}\n            addComment={this.props.addComment}\n            editPost={this.props.editPost}\n            likePost={this.props.likePost}\n            showActions={this.props.currentUser ? true : false}\n            isPreview={false} />\n        </div>\n        <SideMenu currentUser={this.props.currentUser} logoutUser={this.props.logoutUser} />\n      </div>\n    );\n\n    return (\n      <div className=\"PostDetail\">\n        <div className=\"ui container center aligned\">\n          {\n            this.props.currentPost\n            ? postDOM(this.props.currentPost)\n            : loadingDOM\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { currentPost, currentUser } = state;\n  return { currentPost, currentUser };\n}\n\nexport default connect(\n  mapStateToProps,\n  { addComment, editPost, likePost, logoutUser, viewPost }\n)(PostDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { addPost } from '../actions';\nimport ErrorMessages from './ErrorMessages';\n\nconst FILE_SIZE = 3 * 1024 * 1024;\nconst SUPPORTED_FORMATS = [\n  \"image/jpg\",\n  \"image/jpeg\",\n  \"image/gif\",\n  \"image/png\"\n];\n\nconst PostFormSchema = Yup.object().shape({\n  image: Yup.mixed()\n    .required('This field is required')\n    .test(\n      \"fileSize\",\n      \"File too large (should not be bigger than 3 MB)\",\n      value => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"Unsupported Format (Only JPG, PNG, and GIFs are accepted)\",\n      value => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n  caption: Yup.string()\n    .max(200, 'Caption can only be up to 200 characters.')\n});\n\nclass Thumb extends React.Component {\n  state = {\n    loading: false,\n    thumb: undefined,\n    rawFile: null,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.file || nextProps.file === this.state.rawFile) { return; }\n\n    this.setState({ loading: true, rawFile: nextProps.file }, () => {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.setState({ loading: false, thumb: reader.result });\n      };\n\n      reader.readAsDataURL(nextProps.file);\n    });\n  }\n\n  render() {\n    const { file } = this.props;\n    const { loading, thumb } = this.state;\n\n    if (!file) {\n      return null;\n    }\n\n    if (loading) {\n      return <p>Loading...</p>;\n    }\n\n    return (\n      <div>\n        <div className=\"ui tiny header\">\n          Preview:\n        </div>\n        <img src={thumb} alt={file.name} className=\"ui centered bordered medium image\"/>\n      </div>\n    );\n  }\n}\n\nclass PostForm extends React.Component {\n  state = {\n    createdPost: null\n  };\n\n  render() {\n    if (this.props.currentUser === null) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.createdPost !== null) {\n      return <Redirect to={`/p/${this.state.createdPost.id}`} />;\n    }\n\n    return (\n      <div className=\"PostForm\">\n        <div className=\"ui container segment\">\n          <h2 className=\"ui center aligned header\">\n            <div className=\"content\">\n              Add Post\n              <div className=\"sub header\">Share a moment with everyone!</div>\n            </div>\n          </h2>\n          <ErrorMessages errors={this.props.errorMessages} />\n          <Formik\n            initialValues={{\n              image: null,\n              caption: '',\n            }}\n            validationSchema={PostFormSchema}\n            onSubmit={(values, { setSubmitting, props }) => {\n              this.props.addPost(values).then(response => {\n                setSubmitting(false);\n                this.setState({ createdPost: this.props.currentPost });\n              });\n            }}\n          >\n            {({ values, errors, touched, isSubmitting, handleChange, setFieldValue }) => (\n              <Form className={isSubmitting ? \"ui loading form\" : \"ui form\"}>\n                <div className=\"required field\">\n                  <label>Image</label>\n                  <div className=\"ui left icon input\">\n                    <input\n                      type=\"file\"\n                      name=\"image\"\n                      placeholder=\"Image\"\n                      onChange={(event) => { setFieldValue(\"image\", event.currentTarget.files[0]); }}\n                    />\n                    <i className=\"file image icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"image\" component=\"div\" />\n                </div>\n                <Thumb file={values.image} />\n                <div className=\"field\">\n                  <label>Caption</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"caption\" name=\"caption\" placeholder=\"Caption\" onChange={handleChange} value={values.caption} />\n                    <i className=\"quote left icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"caption\" component=\"div\" />\n                </div>\n                <button className=\"ui button\" type=\"submit\">Submit</button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { errorMessages, currentUser, currentPost } = state;\n  return { errorMessages, currentUser, currentPost };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addPost }\n)(PostForm);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from './Header';\nimport Home from './Home';\nimport Login from './Login';\nimport Signup from './Signup';\nimport PostDetail from './PostDetail';\nimport PostForm from './PostForm';\nimport { logoutUser } from '../actions';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header currentUser={this.props.currentUser} logoutUser={this.props.logoutUser} />\n\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            component={\n              () => <Home currentUser={this.props.currentUser} logoutUser={this.props.logoutUser}/>\n            }\n          />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/p/new\" component={PostForm} />\n          <Route path=\"/p/:id\" component={PostDetail} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { currentUser: state.currentUser }\n};\n\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(App);\n","import { combineReducers } from 'redux';\n\nconst postsReducer = (posts=[], action) => {\n  if (action.type === 'FETCH_POSTS') {\n    return action.payload.data;\n  }\n\n  if (action.type === 'TOGGLE_POST_LIKE') {\n    return posts.map(post => {\n      if (post.id === action.payload.postId) {\n        post.is_liked = !post.is_liked;\n        post.likes = post.is_liked ? post.likes + 1 : post.likes - 1;\n      }\n\n      return post;\n    });\n  }\n\n  if (action.type === 'ADD_COMMENT') {\n    return posts.map(post => {\n      if (post.id === action.payload.post) {\n        post.comments.push(action.payload);\n      }\n\n      return post;\n    });\n  }\n\n  if (action.type === 'EDIT_POST') {\n    let temporaryPosts = [];\n    posts.forEach(post => {\n      if (post.id === action.payload.id) {\n        if (action.payload.is_active) temporaryPosts.push(action.payload);\n      } else {\n        temporaryPosts.push(post);\n      }\n    });\n\n    return temporaryPosts;\n  }\n\n  return posts;\n};\n\nconst authReducer = (currentUser=null, action) => {\n  switch(action.type) {\n    case 'LOGIN_USER':\n    case 'NEW_USER':\n      return action.payload;\n    case 'LOGOUT_USER':\n      return null;\n    default:\n      return currentUser;\n  }\n};\n\nconst errorsReducer = (errorMessages=[], action) => {\n  if (action.type.includes('FAILURE')) {\n    if (typeof action.payload === 'string') {\n      errorMessages = [action.payload];\n    } else {\n      let tempErrors = [];\n      Object.keys(action.payload).forEach(errorKey => {\n        if (typeof action.payload[errorKey] === 'string') {\n          tempErrors.push(action.payload[errorKey]);\n        } else {\n          tempErrors = tempErrors.concat(action.payload[errorKey] || []);\n        }\n      });\n\n      errorMessages = tempErrors;\n    }\n  } else {\n    errorMessages = [];\n  }\n\n  return errorMessages;\n};\n\nconst viewPostReducer = (currentPost=null, action) => {\n  // React does a shallowEqual on state changes to determine if the component\n  // should be re-rendered. By cloning the object, we create a different reference.\n  // This variable will be used for times that the currentPost will be manipulated.\n  let currentPostCopy = currentPost === null ? null : { ...currentPost };\n\n  if (action.type === 'VIEW_POST') {\n    return action.payload;\n  }\n\n  if (action.type === 'TOGGLE_POST_LIKE') {\n    if (currentPost !== null && currentPost.id === action.payload.postId) {\n      currentPostCopy.is_liked = !currentPostCopy.is_liked;\n      currentPostCopy.likes = currentPostCopy.is_liked\n                              ? currentPostCopy.likes + 1\n                              : currentPostCopy.likes - 1;\n    }\n  }\n\n  if (action.type === 'ADD_COMMENT') {\n    if (currentPost !== null && currentPost.id === action.payload.post) {\n      currentPostCopy.comments.push(action.payload);\n    }\n  }\n\n  if (action.type === 'ADD_POST') {\n    currentPostCopy = action.payload;\n  }\n\n  currentPost = currentPostCopy;\n  return currentPost;\n};\n\nexport default combineReducers({\n  posts: postsReducer,\n  currentPost: viewPostReducer,\n  currentUser: authReducer,\n  errorMessages: errorsReducer,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\nimport { localStorageMiddleware } from './middlewares';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(thunk, localStorageMiddleware));\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <div>\n        <Route path=\"/\" component={App} />\n      </div>\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const localStorageMiddleware = store => next => action => {\n  if (['LOGIN_USER', 'NEW_USER'].includes(action.type)) {\n    if (action.payload.token) {\n      window.localStorage.setItem('jwt', action.payload.token);\n    }\n  } else if (action.type === 'LOGOUT_USER') {\n    window.localStorage.removeItem('jwt');\n  }\n\n  next(action);\n};\n\nexport { localStorageMiddleware };\n"],"sourceRoot":""}