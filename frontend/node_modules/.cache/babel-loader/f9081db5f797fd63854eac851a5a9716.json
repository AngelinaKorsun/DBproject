{"ast":null,"code":"import _objectSpread from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { combineReducers } from 'redux';\n\nconst postsReducer = (posts = [], action) => {\n  if (action.type === 'FETCH_POSTS') {\n    return action.payload.data;\n  }\n\n  if (action.type === 'TOGGLE_POST_LIKE') {\n    return posts.map(post => {\n      if (post.id === action.payload.postId) {\n        post.is_liked = !post.is_liked;\n        post.likes = post.is_liked ? post.likes + 1 : post.likes - 1;\n      }\n\n      return post;\n    });\n  }\n\n  if (action.type === 'ADD_COMMENT') {\n    return posts.map(post => {\n      if (post.id === action.payload.post) {\n        post.comments.push(action.payload);\n      }\n\n      return post;\n    });\n  }\n\n  if (action.type === 'EDIT_POST') {\n    let temporaryPosts = [];\n    posts.forEach(post => {\n      if (post.id === action.payload.id) {\n        if (action.payload.is_active) temporaryPosts.push(action.payload);\n      } else {\n        temporaryPosts.push(post);\n      }\n    });\n    return temporaryPosts;\n  }\n\n  return posts;\n};\n\nconst authReducer = (currentUser = null, action) => {\n  switch (action.type) {\n    case 'LOGIN_USER':\n    case 'NEW_USER':\n      return action.payload;\n\n    case 'LOGOUT_USER':\n      return null;\n\n    default:\n      return currentUser;\n  }\n};\n\nconst errorsReducer = (errorMessages = [], action) => {\n  if (action.type.includes('FAILURE')) {\n    if (typeof action.payload === 'string') {\n      errorMessages = [action.payload];\n    } else {\n      let tempErrors = [];\n      Object.keys(action.payload).forEach(errorKey => {\n        if (typeof action.payload[errorKey] === 'string') {\n          tempErrors.push(action.payload[errorKey]);\n        } else {\n          tempErrors = tempErrors.concat(action.payload[errorKey] || []);\n        }\n      });\n      errorMessages = tempErrors;\n    }\n  } else {\n    errorMessages = [];\n  }\n\n  return errorMessages;\n};\n\nconst viewPostReducer = (currentPost = null, action) => {\n  // React does a shallowEqual on state changes to determine if the component\n  // should be re-rendered. By cloning the object, we create a different reference.\n  // This variable will be used for times that the currentPost will be manipulated.\n  let currentPostCopy = currentPost === null ? null : _objectSpread({}, currentPost);\n\n  if (action.type === 'VIEW_POST') {\n    return action.payload;\n  }\n\n  if (action.type === 'TOGGLE_POST_LIKE') {\n    if (currentPost !== null && currentPost.id === action.payload.postId) {\n      currentPostCopy.is_liked = !currentPostCopy.is_liked;\n      currentPostCopy.likes = currentPostCopy.is_liked ? currentPostCopy.likes + 1 : currentPostCopy.likes - 1;\n    }\n  }\n\n  if (action.type === 'ADD_COMMENT') {\n    if (currentPost !== null && currentPost.id === action.payload.post) {\n      currentPostCopy.comments.push(action.payload);\n    }\n  }\n\n  if (action.type === 'ADD_POST') {\n    currentPostCopy = action.payload;\n  }\n\n  currentPost = currentPostCopy;\n  return currentPost;\n};\n\nexport default combineReducers({\n  posts: postsReducer,\n  currentPost: viewPostReducer,\n  currentUser: authReducer,\n  errorMessages: errorsReducer\n});","map":{"version":3,"sources":["/home/sergol/DBprojects/instaz/frontend/src/reducers/index.js"],"names":["combineReducers","postsReducer","posts","action","type","payload","data","map","post","id","postId","is_liked","likes","comments","push","temporaryPosts","forEach","is_active","authReducer","currentUser","errorsReducer","errorMessages","includes","tempErrors","Object","keys","errorKey","concat","viewPostReducer","currentPost","currentPostCopy"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nconst postsReducer = (posts=[], action) => {\n  if (action.type === 'FETCH_POSTS') {\n    return action.payload.data;\n  }\n\n  if (action.type === 'TOGGLE_POST_LIKE') {\n    return posts.map(post => {\n      if (post.id === action.payload.postId) {\n        post.is_liked = !post.is_liked;\n        post.likes = post.is_liked ? post.likes + 1 : post.likes - 1;\n      }\n\n      return post;\n    });\n  }\n\n  if (action.type === 'ADD_COMMENT') {\n    return posts.map(post => {\n      if (post.id === action.payload.post) {\n        post.comments.push(action.payload);\n      }\n\n      return post;\n    });\n  }\n\n  if (action.type === 'EDIT_POST') {\n    let temporaryPosts = [];\n    posts.forEach(post => {\n      if (post.id === action.payload.id) {\n        if (action.payload.is_active) temporaryPosts.push(action.payload);\n      } else {\n        temporaryPosts.push(post);\n      }\n    });\n\n    return temporaryPosts;\n  }\n\n  return posts;\n};\n\nconst authReducer = (currentUser=null, action) => {\n  switch(action.type) {\n    case 'LOGIN_USER':\n    case 'NEW_USER':\n      return action.payload;\n    case 'LOGOUT_USER':\n      return null;\n    default:\n      return currentUser;\n  }\n};\n\nconst errorsReducer = (errorMessages=[], action) => {\n  if (action.type.includes('FAILURE')) {\n    if (typeof action.payload === 'string') {\n      errorMessages = [action.payload];\n    } else {\n      let tempErrors = [];\n      Object.keys(action.payload).forEach(errorKey => {\n        if (typeof action.payload[errorKey] === 'string') {\n          tempErrors.push(action.payload[errorKey]);\n        } else {\n          tempErrors = tempErrors.concat(action.payload[errorKey] || []);\n        }\n      });\n\n      errorMessages = tempErrors;\n    }\n  } else {\n    errorMessages = [];\n  }\n\n  return errorMessages;\n};\n\nconst viewPostReducer = (currentPost=null, action) => {\n  // React does a shallowEqual on state changes to determine if the component\n  // should be re-rendered. By cloning the object, we create a different reference.\n  // This variable will be used for times that the currentPost will be manipulated.\n  let currentPostCopy = currentPost === null ? null : { ...currentPost };\n\n  if (action.type === 'VIEW_POST') {\n    return action.payload;\n  }\n\n  if (action.type === 'TOGGLE_POST_LIKE') {\n    if (currentPost !== null && currentPost.id === action.payload.postId) {\n      currentPostCopy.is_liked = !currentPostCopy.is_liked;\n      currentPostCopy.likes = currentPostCopy.is_liked\n                              ? currentPostCopy.likes + 1\n                              : currentPostCopy.likes - 1;\n    }\n  }\n\n  if (action.type === 'ADD_COMMENT') {\n    if (currentPost !== null && currentPost.id === action.payload.post) {\n      currentPostCopy.comments.push(action.payload);\n    }\n  }\n\n  if (action.type === 'ADD_POST') {\n    currentPostCopy = action.payload;\n  }\n\n  currentPost = currentPostCopy;\n  return currentPost;\n};\n\nexport default combineReducers({\n  posts: postsReducer,\n  currentPost: viewPostReducer,\n  currentUser: authReducer,\n  errorMessages: errorsReducer,\n});\n"]},"metadata":{},"sourceType":"module"}