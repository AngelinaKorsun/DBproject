{"ast":null,"code":"import _objectSpread from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport instazApi from '../utils/InstazApi';\n\nconst fetchPosts = () => async dispatch => {\n  const response = await instazApi.get('/posts');\n  dispatch({\n    type: 'FETCH_POSTS',\n    payload: response\n  });\n};\n\nconst loginUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/login/', _objectSpread({}, userData)).then(response => {\n    dispatch({\n      type: 'LOGIN_USER',\n      payload: response.data\n    });\n  }, error => {\n    dispatch({\n      type: 'LOGIN_USER_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nconst registerUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/signup/', _objectSpread({}, userData)).then(response => {\n    dispatch({\n      type: 'NEW_USER',\n      payload: response.data\n    });\n  }, error => {\n    dispatch({\n      type: 'NEW_USER_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT_USER'\n  };\n};\n\nconst likePost = postId => async dispatch => {\n  await instazApi.post(`/posts/${postId}/like/`).then(response => {\n    dispatch({\n      type: 'TOGGLE_POST_LIKE',\n      payload: {\n        postId\n      }\n    });\n  }, error => {\n    dispatch({\n      type: 'TOGGLE_POST_LIKE_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nconst viewPost = postId => async dispatch => {\n  await instazApi.get(`/posts/${postId}/`).then(response => {\n    dispatch({\n      type: 'VIEW_POST',\n      payload: response.data\n    });\n  }, error => {\n    dispatch({\n      type: 'VIEW_POST_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nconst addComment = ({\n  post,\n  message\n}) => async dispatch => {\n  await instazApi.post('/comments/', {\n    post,\n    message\n  }).then(response => {\n    dispatch({\n      type: 'ADD_COMMENT',\n      payload: response.data\n    });\n  }, error => {\n    dispatch({\n      type: 'ADD_COMMENT_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nconst addPost = ({\n  image,\n  caption\n}) => async dispatch => {\n  const postData = new FormData();\n  postData.append('image', image);\n  postData.append('caption', caption);\n  await instazApi.post(\"/posts/\", postData, {\n    headers: {\n      'content-type': 'multipart/form-data'\n    }\n  }).then(response => {\n    dispatch({\n      type: 'ADD_POST',\n      payload: response.data\n    });\n  }, error => {\n    dispatch({\n      type: 'ADD_POST_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nconst editPost = post => async dispatch => {\n  const postData = new FormData();\n  Object.keys(post).forEach(key => {\n    if (key === 'image' && typeof post[key] === 'string') return;\n    postData.append(key, post[key]);\n  });\n  await instazApi.patch(`/posts/${post.id}/`, postData, {\n    headers: {\n      'content-type': 'multipart/form-data'\n    }\n  }).then(response => {\n    dispatch({\n      type: 'EDIT_POST',\n      payload: response.data\n    });\n  }, error => {\n    dispatch({\n      type: 'EDIT_POST_FAILURE',\n      payload: error.response ? error.response.data : error.message\n    });\n  });\n};\n\nexport { addComment, addPost, editPost, fetchPosts, likePost, loginUser, registerUser, logoutUser, viewPost };","map":{"version":3,"sources":["/home/sergol/DBprojects/instaz/frontend/src/actions/index.js"],"names":["instazApi","fetchPosts","dispatch","response","get","type","payload","loginUser","userData","post","then","data","error","message","registerUser","logoutUser","likePost","postId","viewPost","addComment","addPost","image","caption","postData","FormData","append","headers","editPost","Object","keys","forEach","key","patch","id"],"mappings":"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","sourcesContent":["import instazApi from '../utils/InstazApi';\n\nconst fetchPosts = () => async dispatch => {\n  const response = await instazApi.get('/posts');\n\n  dispatch({\n    type: 'FETCH_POSTS',\n    payload: response\n  });\n};\n\nconst loginUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/login/', {...userData}).then(\n    response => {\n      dispatch({\n        type: 'LOGIN_USER',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'LOGIN_USER_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst registerUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/signup/', { ...userData }).then(\n    response => {\n      dispatch({\n        type: 'NEW_USER',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'NEW_USER_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT_USER'\n  };\n};\n\nconst likePost = (postId) => async dispatch => {\n  await instazApi.post(`/posts/${postId}/like/`).then(\n    response => {\n      dispatch({\n        type: 'TOGGLE_POST_LIKE',\n        payload: { postId }\n      });\n    },\n    error => {\n      dispatch({\n        type: 'TOGGLE_POST_LIKE_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst viewPost = (postId) => async dispatch => {\n  await instazApi.get(`/posts/${postId}/`).then(\n    response => {\n      dispatch({\n        type: 'VIEW_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'VIEW_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst addComment = ({ post, message }) => async dispatch => {\n  await instazApi.post('/comments/', { post, message }).then(\n    response => {\n      dispatch({\n        type: 'ADD_COMMENT',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'ADD_COMMENT_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst addPost = ({ image, caption }) => async dispatch => {\n  const postData = new FormData();\n  postData.append('image', image);\n  postData.append('caption', caption);\n\n  await instazApi.post(\n    \"/posts/\",\n    postData,\n    { headers: { 'content-type': 'multipart/form-data' }}\n  ).then(\n    response => {\n      dispatch({\n        type: 'ADD_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'ADD_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst editPost = post => async dispatch => {\n  const postData = new FormData();\n  Object.keys(post).forEach(key => {\n    if (key === 'image' && typeof post[key] === 'string') return;\n\n    postData.append(key, post[key]);\n  });\n\n  await instazApi.patch(\n    `/posts/${post.id}/`,\n    postData,\n    { headers: { 'content-type': 'multipart/form-data' }}\n  ).then(\n    response => {\n      dispatch({\n        type: 'EDIT_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'EDIT_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nexport {\n  addComment, addPost, editPost, fetchPosts, likePost,\n  loginUser, registerUser, logoutUser, viewPost\n};\n"]},"metadata":{},"sourceType":"module"}