{"ast":null,"code":"import _objectSpread from\"/home/sergol/DBprojects/instaz/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/sergol/DBprojects/instaz/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import instazApi from'../utils/InstazApi';var fetchPosts=function fetchPosts(){return function _callee(dispatch){var response;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(instazApi.get('/posts'));case 2:response=_context.sent;dispatch({type:'FETCH_POSTS',payload:response});case 4:case\"end\":return _context.stop();}}});};};var loginUser=function loginUser(userData){return function _callee2(dispatch){return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(instazApi.post('/users/auth/login/',_objectSpread({},userData)).then(function(response){dispatch({type:'LOGIN_USER',payload:response.data});},function(error){dispatch({type:'LOGIN_USER_FAILURE',payload:error.response?error.response.data:error.message});}));case 2:case\"end\":return _context2.stop();}}});};};var registerUser=function registerUser(userData){return function _callee3(dispatch){return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(instazApi.post('/users/auth/signup/',_objectSpread({},userData)).then(function(response){dispatch({type:'NEW_USER',payload:response.data});},function(error){dispatch({type:'NEW_USER_FAILURE',payload:error.response?error.response.data:error.message});}));case 2:case\"end\":return _context3.stop();}}});};};var logoutUser=function logoutUser(){return{type:'LOGOUT_USER'};};var likePost=function likePost(postId){return function _callee4(dispatch){return _regeneratorRuntime.async(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _regeneratorRuntime.awrap(instazApi.post(\"/posts/\".concat(postId,\"/like/\")).then(function(response){dispatch({type:'TOGGLE_POST_LIKE',payload:{postId:postId}});},function(error){dispatch({type:'TOGGLE_POST_LIKE_FAILURE',payload:error.response?error.response.data:error.message});}));case 2:case\"end\":return _context4.stop();}}});};};var viewPost=function viewPost(postId){return function _callee5(dispatch){return _regeneratorRuntime.async(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return _regeneratorRuntime.awrap(instazApi.get(\"/posts/\".concat(postId,\"/\")).then(function(response){dispatch({type:'VIEW_POST',payload:response.data});},function(error){dispatch({type:'VIEW_POST_FAILURE',payload:error.response?error.response.data:error.message});}));case 2:case\"end\":return _context5.stop();}}});};};var addComment=function addComment(_ref){var post=_ref.post,message=_ref.message;return function _callee6(dispatch){return _regeneratorRuntime.async(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return _regeneratorRuntime.awrap(instazApi.post('/comments/',{post:post,message:message}).then(function(response){dispatch({type:'ADD_COMMENT',payload:response.data});},function(error){dispatch({type:'ADD_COMMENT_FAILURE',payload:error.response?error.response.data:error.message});}));case 2:case\"end\":return _context6.stop();}}});};};var addPost=function addPost(_ref2){var image=_ref2.image,caption=_ref2.caption;return function _callee7(dispatch){var postData;return _regeneratorRuntime.async(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:postData=new FormData();postData.append('image',image);postData.append('caption',caption);_context7.next=5;return _regeneratorRuntime.awrap(instazApi.post(\"/posts/\",postData,{headers:{'content-type':'multipart/form-data'}}).then(function(response){dispatch({type:'ADD_POST',payload:response.data});},function(error){dispatch({type:'ADD_POST_FAILURE',payload:error.response?error.response.data:error.message});}));case 5:case\"end\":return _context7.stop();}}});};};var editPost=function editPost(post){return function _callee8(dispatch){var postData;return _regeneratorRuntime.async(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:postData=new FormData();Object.keys(post).forEach(function(key){if(key==='image'&&typeof post[key]==='string')return;postData.append(key,post[key]);});_context8.next=4;return _regeneratorRuntime.awrap(instazApi.patch(\"/posts/\".concat(post.id,\"/\"),postData,{headers:{'content-type':'multipart/form-data'}}).then(function(response){dispatch({type:'EDIT_POST',payload:response.data});},function(error){dispatch({type:'EDIT_POST_FAILURE',payload:error.response?error.response.data:error.message});}));case 4:case\"end\":return _context8.stop();}}});};};export{addComment,addPost,editPost,fetchPosts,likePost,loginUser,registerUser,logoutUser,viewPost};","map":{"version":3,"sources":["/home/sergol/DBprojects/instaz/frontend/src/actions/index.js"],"names":["instazApi","fetchPosts","dispatch","get","response","type","payload","loginUser","userData","post","then","data","error","message","registerUser","logoutUser","likePost","postId","viewPost","addComment","addPost","image","caption","postData","FormData","append","headers","editPost","Object","keys","forEach","key","patch","id"],"mappings":"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","sourcesContent":["import instazApi from '../utils/InstazApi';\n\nconst fetchPosts = () => async dispatch => {\n  const response = await instazApi.get('/posts');\n\n  dispatch({\n    type: 'FETCH_POSTS',\n    payload: response\n  });\n};\n\nconst loginUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/login/', {...userData}).then(\n    response => {\n      dispatch({\n        type: 'LOGIN_USER',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'LOGIN_USER_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst registerUser = userData => async dispatch => {\n  await instazApi.post('/users/auth/signup/', { ...userData }).then(\n    response => {\n      dispatch({\n        type: 'NEW_USER',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'NEW_USER_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT_USER'\n  };\n};\n\nconst likePost = (postId) => async dispatch => {\n  await instazApi.post(`/posts/${postId}/like/`).then(\n    response => {\n      dispatch({\n        type: 'TOGGLE_POST_LIKE',\n        payload: { postId }\n      });\n    },\n    error => {\n      dispatch({\n        type: 'TOGGLE_POST_LIKE_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst viewPost = (postId) => async dispatch => {\n  await instazApi.get(`/posts/${postId}/`).then(\n    response => {\n      dispatch({\n        type: 'VIEW_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'VIEW_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst addComment = ({ post, message }) => async dispatch => {\n  await instazApi.post('/comments/', { post, message }).then(\n    response => {\n      dispatch({\n        type: 'ADD_COMMENT',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'ADD_COMMENT_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst addPost = ({ image, caption }) => async dispatch => {\n  const postData = new FormData();\n  postData.append('image', image);\n  postData.append('caption', caption);\n\n  await instazApi.post(\n    \"/posts/\",\n    postData,\n    { headers: { 'content-type': 'multipart/form-data' }}\n  ).then(\n    response => {\n      dispatch({\n        type: 'ADD_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'ADD_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nconst editPost = post => async dispatch => {\n  const postData = new FormData();\n  Object.keys(post).forEach(key => {\n    if (key === 'image' && typeof post[key] === 'string') return;\n\n    postData.append(key, post[key]);\n  });\n\n  await instazApi.patch(\n    `/posts/${post.id}/`,\n    postData,\n    { headers: { 'content-type': 'multipart/form-data' }}\n  ).then(\n    response => {\n      dispatch({\n        type: 'EDIT_POST',\n        payload: response.data\n      });\n    },\n    error => {\n      dispatch({\n        type: 'EDIT_POST_FAILURE',\n        payload: error.response ? error.response.data : error.message\n      });\n    }\n  );\n};\n\nexport {\n  addComment, addPost, editPost, fetchPosts, likePost,\n  loginUser, registerUser, logoutUser, viewPost\n};\n"]},"metadata":{},"sourceType":"module"}