{"ast":null,"code":"var _jsxFileName = \"/home/sergol/DBprojects/instaz/frontend/src/components/PostForm.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { addPost } from '../actions';\nimport ErrorMessages from './ErrorMessages';\nconst FILE_SIZE = 3 * 1024 * 1024;\nconst SUPPORTED_FORMATS = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\"];\nconst PostFormSchema = Yup.object().shape({\n  image: Yup.mixed().required('This field is required').test(\"fileSize\", \"File too large (should not be bigger than 3 MB)\", value => value && value.size <= FILE_SIZE).test(\"fileFormat\", \"Unsupported Format (Only JPG, PNG, and GIFs are accepted)\", value => value && SUPPORTED_FORMATS.includes(value.type)),\n  caption: Yup.string().max(200, 'Caption can only be up to 200 characters.')\n});\n\nclass Thumb extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      thumb: undefined,\n      rawFile: null\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.file || nextProps.file === this.state.rawFile) {\n      return;\n    }\n\n    this.setState({\n      loading: true,\n      rawFile: nextProps.file\n    }, () => {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.setState({\n          loading: false,\n          thumb: reader.result\n        });\n      };\n\n      reader.readAsDataURL(nextProps.file);\n    });\n  }\n\n  render() {\n    const file = this.props.file;\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          thumb = _this$state.thumb;\n\n    if (!file) {\n      return null;\n    }\n\n    if (loading) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ui tiny header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Preview:\"), React.createElement(\"img\", {\n      src: thumb,\n      alt: file.name,\n      className: \"ui centered bordered medium image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass PostForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      createdPost: null\n    };\n  }\n\n  render() {\n    if (this.props.currentUser === null) {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.createdPost !== null) {\n      return React.createElement(Redirect, {\n        to: `/p/${this.state.createdPost.id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"PostForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ui container segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"ui center aligned header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Add Post\", React.createElement(\"div\", {\n      className: \"sub header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Share a moment with everyone!\"))), React.createElement(ErrorMessages, {\n      errors: this.props.errorMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Formik, {\n      initialValues: {\n        image: null,\n        caption: ''\n      },\n      validationSchema: PostFormSchema,\n      onSubmit: (values, {\n        setSubmitting,\n        props\n      }) => {\n        this.props.addPost(values).then(response => {\n          setSubmitting(false);\n          this.setState({\n            createdPost: this.props.currentPost\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, ({\n      values,\n      errors,\n      touched,\n      isSubmitting,\n      handleChange,\n      setFieldValue\n    }) => React.createElement(Form, {\n      className: isSubmitting ? \"ui loading form\" : \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"required field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Image\"), React.createElement(\"div\", {\n      className: \"ui left icon input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      name: \"image\",\n      placeholder: \"Image\",\n      onChange: event => {\n        setFieldValue(\"image\", event.currentTarget.files[0]);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      className: \"file image icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(ErrorMessage, {\n      className: \"error\",\n      name: \"image\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(Thumb, {\n      file: values.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Caption\"), React.createElement(\"div\", {\n      className: \"ui left icon input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"caption\",\n      name: \"caption\",\n      placeholder: \"Caption\",\n      onChange: handleChange,\n      value: values.caption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      className: \"quote left icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(ErrorMessage, {\n      className: \"error\",\n      name: \"caption\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"ui button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Submit\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const errorMessages = state.errorMessages,\n        currentUser = state.currentUser,\n        currentPost = state.currentPost;\n  return {\n    errorMessages,\n    currentUser,\n    currentPost\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addPost\n})(PostForm);","map":{"version":3,"sources":["/home/sergol/DBprojects/instaz/frontend/src/components/PostForm.js"],"names":["React","connect","Redirect","Formik","Form","ErrorMessage","Yup","addPost","ErrorMessages","FILE_SIZE","SUPPORTED_FORMATS","PostFormSchema","object","shape","image","mixed","required","test","value","size","includes","type","caption","string","max","Thumb","Component","state","loading","thumb","undefined","rawFile","componentWillReceiveProps","nextProps","file","setState","reader","FileReader","onloadend","result","readAsDataURL","render","props","name","PostForm","createdPost","currentUser","id","errorMessages","values","setSubmitting","then","response","currentPost","errors","touched","isSubmitting","handleChange","setFieldValue","event","currentTarget","files","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { addPost } from '../actions';\nimport ErrorMessages from './ErrorMessages';\n\nconst FILE_SIZE = 3 * 1024 * 1024;\nconst SUPPORTED_FORMATS = [\n  \"image/jpg\",\n  \"image/jpeg\",\n  \"image/gif\",\n  \"image/png\"\n];\n\nconst PostFormSchema = Yup.object().shape({\n  image: Yup.mixed()\n    .required('This field is required')\n    .test(\n      \"fileSize\",\n      \"File too large (should not be bigger than 3 MB)\",\n      value => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"Unsupported Format (Only JPG, PNG, and GIFs are accepted)\",\n      value => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n  caption: Yup.string()\n    .max(200, 'Caption can only be up to 200 characters.')\n});\n\nclass Thumb extends React.Component {\n  state = {\n    loading: false,\n    thumb: undefined,\n    rawFile: null,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.file || nextProps.file === this.state.rawFile) { return; }\n\n    this.setState({ loading: true, rawFile: nextProps.file }, () => {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.setState({ loading: false, thumb: reader.result });\n      };\n\n      reader.readAsDataURL(nextProps.file);\n    });\n  }\n\n  render() {\n    const { file } = this.props;\n    const { loading, thumb } = this.state;\n\n    if (!file) {\n      return null;\n    }\n\n    if (loading) {\n      return <p>Loading...</p>;\n    }\n\n    return (\n      <div>\n        <div className=\"ui tiny header\">\n          Preview:\n        </div>\n        <img src={thumb} alt={file.name} className=\"ui centered bordered medium image\"/>\n      </div>\n    );\n  }\n}\n\nclass PostForm extends React.Component {\n  state = {\n    createdPost: null\n  };\n\n  render() {\n    if (this.props.currentUser === null) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.createdPost !== null) {\n      return <Redirect to={`/p/${this.state.createdPost.id}`} />;\n    }\n\n    return (\n      <div className=\"PostForm\">\n        <div className=\"ui container segment\">\n          <h2 className=\"ui center aligned header\">\n            <div className=\"content\">\n              Add Post\n              <div className=\"sub header\">Share a moment with everyone!</div>\n            </div>\n          </h2>\n          <ErrorMessages errors={this.props.errorMessages} />\n          <Formik\n            initialValues={{\n              image: null,\n              caption: '',\n            }}\n            validationSchema={PostFormSchema}\n            onSubmit={(values, { setSubmitting, props }) => {\n              this.props.addPost(values).then(response => {\n                setSubmitting(false);\n                this.setState({ createdPost: this.props.currentPost });\n              });\n            }}\n          >\n            {({ values, errors, touched, isSubmitting, handleChange, setFieldValue }) => (\n              <Form className={isSubmitting ? \"ui loading form\" : \"ui form\"}>\n                <div className=\"required field\">\n                  <label>Image</label>\n                  <div className=\"ui left icon input\">\n                    <input\n                      type=\"file\"\n                      name=\"image\"\n                      placeholder=\"Image\"\n                      onChange={(event) => { setFieldValue(\"image\", event.currentTarget.files[0]); }}\n                    />\n                    <i className=\"file image icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"image\" component=\"div\" />\n                </div>\n                <Thumb file={values.image} />\n                <div className=\"field\">\n                  <label>Caption</label>\n                  <div className=\"ui left icon input\">\n                    <input type=\"caption\" name=\"caption\" placeholder=\"Caption\" onChange={handleChange} value={values.caption} />\n                    <i className=\"quote left icon\"></i>\n                  </div>\n                  <ErrorMessage className=\"error\" name=\"caption\" component=\"div\" />\n                </div>\n                <button className=\"ui button\" type=\"submit\">Submit</button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { errorMessages, currentUser, currentPost } = state;\n  return { errorMessages, currentUser, currentPost };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addPost }\n)(PostForm);\n"]},"metadata":{},"sourceType":"module"}